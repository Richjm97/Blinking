
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001354  08001354  00011354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001400  08001400  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001400  08001400  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001400  08001400  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000068  08001470  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001470  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002822  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000856  00000000  00000000  000228ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00023110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00023310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d7a  00000000  00000000  000234c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b52  00000000  00000000  00026242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009dab  00000000  00000000  00027d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00031b3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d54  00000000  00000000  00031b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800133c 	.word	0x0800133c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	0800133c 	.word	0x0800133c

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <led_init_all>:

void led_init_all(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x6c>)
 800021c:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020000; //GPIOA
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <led_init_all+0x70>)
 8000220:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 0);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0201 	orr.w	r2, r3, #1
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025e:	2005      	movs	r0, #5
 8000260:	f000 f82a 	bl	80002b8 <led_off>
    led_off(LED_ORANGE);
 8000264:	2006      	movs	r0, #6
 8000266:	f000 f827 	bl	80002b8 <led_off>
    led_off(LED_RED);
 800026a:	2007      	movs	r0, #7
 800026c:	f000 f824 	bl	80002b8 <led_off>
    led_off(LED_BLUE);
 8000270:	2008      	movs	r0, #8
 8000272:	f000 f821 	bl	80002b8 <led_off>



}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023830 	.word	0x40023830
 8000284:	40020000 	.word	0x40020000

08000288 <led_on>:

void led_on(uint8_t led_no)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020014;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <led_on+0x2c>)
 8000294:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	2101      	movs	r1, #1
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	431a      	orrs	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	601a      	str	r2, [r3, #0]

}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40020014 	.word	0x40020014

080002b8 <led_off>:

void led_off(uint8_t led_no)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020014;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <led_off+0x30>)
 80002c4:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	79fa      	ldrb	r2, [r7, #7]
 80002cc:	2101      	movs	r1, #1
 80002ce:	fa01 f202 	lsl.w	r2, r1, r2
 80002d2:	43d2      	mvns	r2, r2
 80002d4:	401a      	ands	r2, r3
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]

}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40020014 	.word	0x40020014

080002ec <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002f0:	f000 f928 	bl	8000544 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <main+0x28>)
 80002f6:	f000 f891 	bl	800041c <init_scheduler_stack>

	init_tasks_stack();
 80002fa:	f000 f895 	bl	8000428 <init_tasks_stack>

	led_init_all();
 80002fe:	f7ff ff89 	bl	8000214 <led_init_all>

	init_systick_timer(TICK_HZ);
 8000302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000306:	f000 f853 	bl	80003b0 <init_systick_timer>

	switch_sp_to_psp();
 800030a:	f000 f9a7 	bl	800065c <switch_sp_to_psp>

	task1_handler();
 800030e:	f000 f807 	bl	8000320 <task1_handler>

	for(;;);
 8000312:	e7fe      	b.n	8000312 <main+0x26>
 8000314:	2001ec00 	.word	0x2001ec00

08000318 <idle_task>:
}


void idle_task(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	while(1);
 800031c:	e7fe      	b.n	800031c <idle_task+0x4>
	...

08000320 <task1_handler>:
}


void task1_handler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000324:	2005      	movs	r0, #5
 8000326:	f7ff ffaf 	bl	8000288 <led_on>
		delay(DELAY_COUNT_1S);
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <task1_handler+0x20>)
 800032c:	f7ff ff5c 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 8000330:	2005      	movs	r0, #5
 8000332:	f7ff ffc1 	bl	80002b8 <led_off>
		delay(DELAY_COUNT_1S);
 8000336:	4802      	ldr	r0, [pc, #8]	; (8000340 <task1_handler+0x20>)
 8000338:	f7ff ff56 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 800033c:	e7f2      	b.n	8000324 <task1_handler+0x4>
 800033e:	bf00      	nop
 8000340:	001312d0 	.word	0x001312d0

08000344 <task2_handler>:
	}

}

void task2_handler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000348:	2006      	movs	r0, #6
 800034a:	f7ff ff9d 	bl	8000288 <led_on>
		delay(DELAY_COUNT_500MS);
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <task2_handler+0x20>)
 8000350:	f7ff ff4a 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 8000354:	2006      	movs	r0, #6
 8000356:	f7ff ffaf 	bl	80002b8 <led_off>
		delay(DELAY_COUNT_500MS);
 800035a:	4802      	ldr	r0, [pc, #8]	; (8000364 <task2_handler+0x20>)
 800035c:	f7ff ff44 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 8000360:	e7f2      	b.n	8000348 <task2_handler+0x4>
 8000362:	bf00      	nop
 8000364:	00098968 	.word	0x00098968

08000368 <task3_handler>:
	}

}

void task3_handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 800036c:	2008      	movs	r0, #8
 800036e:	f7ff ff8b 	bl	8000288 <led_on>
		delay(DELAY_COUNT_250MS);
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <task3_handler+0x20>)
 8000374:	f7ff ff38 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 8000378:	2008      	movs	r0, #8
 800037a:	f7ff ff9d 	bl	80002b8 <led_off>
		delay(DELAY_COUNT_250MS);
 800037e:	4802      	ldr	r0, [pc, #8]	; (8000388 <task3_handler+0x20>)
 8000380:	f7ff ff32 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 8000384:	e7f2      	b.n	800036c <task3_handler+0x4>
 8000386:	bf00      	nop
 8000388:	0004c4b4 	.word	0x0004c4b4

0800038c <task4_handler>:

}

void task4_handler(void)

{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000390:	2007      	movs	r0, #7
 8000392:	f7ff ff79 	bl	8000288 <led_on>
		delay(DELAY_COUNT_125MS);
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <task4_handler+0x20>)
 8000398:	f7ff ff26 	bl	80001e8 <delay>
		led_off(LED_RED);
 800039c:	2007      	movs	r0, #7
 800039e:	f7ff ff8b 	bl	80002b8 <led_off>
		delay(DELAY_COUNT_125MS);
 80003a2:	4802      	ldr	r0, [pc, #8]	; (80003ac <task4_handler+0x20>)
 80003a4:	f7ff ff20 	bl	80001e8 <delay>
		led_on(LED_RED);
 80003a8:	e7f2      	b.n	8000390 <task4_handler+0x4>
 80003aa:	bf00      	nop
 80003ac:	0002625a 	.word	0x0002625a

080003b0 <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <init_systick_timer+0x60>)
 80003ba:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <init_systick_timer+0x64>)
 80003be:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003c0:	4a15      	ldr	r2, [pc, #84]	; (8000418 <init_systick_timer+0x68>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c8:	3b01      	subs	r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	431a      	orrs	r2, r3
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 0202 	orr.w	r2, r3, #2
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f043 0204 	orr.w	r2, r3, #4
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f043 0201 	orr.w	r2, r3, #1
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	601a      	str	r2, [r3, #0]

}
 8000402:	bf00      	nop
 8000404:	371c      	adds	r7, #28
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000e014 	.word	0xe000e014
 8000414:	e000e010 	.word	0xe000e010
 8000418:	00f42400 	.word	0x00f42400

0800041c <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800041c:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 800041e:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 8000422:	4770      	bx	lr

}
 8000424:	bf00      	nop
	...

08000428 <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 800042e:	4b3a      	ldr	r3, [pc, #232]	; (8000518 <init_tasks_stack+0xf0>)
 8000430:	2200      	movs	r2, #0
 8000432:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000434:	4b38      	ldr	r3, [pc, #224]	; (8000518 <init_tasks_stack+0xf0>)
 8000436:	2200      	movs	r2, #0
 8000438:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800043a:	4b37      	ldr	r3, [pc, #220]	; (8000518 <init_tasks_stack+0xf0>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000442:	4b35      	ldr	r3, [pc, #212]	; (8000518 <init_tasks_stack+0xf0>)
 8000444:	2200      	movs	r2, #0
 8000446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800044a:	4b33      	ldr	r3, [pc, #204]	; (8000518 <init_tasks_stack+0xf0>)
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000452:	4b31      	ldr	r3, [pc, #196]	; (8000518 <init_tasks_stack+0xf0>)
 8000454:	4a31      	ldr	r2, [pc, #196]	; (800051c <init_tasks_stack+0xf4>)
 8000456:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000458:	4b2f      	ldr	r3, [pc, #188]	; (8000518 <init_tasks_stack+0xf0>)
 800045a:	4a31      	ldr	r2, [pc, #196]	; (8000520 <init_tasks_stack+0xf8>)
 800045c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800045e:	4b2e      	ldr	r3, [pc, #184]	; (8000518 <init_tasks_stack+0xf0>)
 8000460:	4a30      	ldr	r2, [pc, #192]	; (8000524 <init_tasks_stack+0xfc>)
 8000462:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000464:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <init_tasks_stack+0xf0>)
 8000466:	4a30      	ldr	r2, [pc, #192]	; (8000528 <init_tasks_stack+0x100>)
 8000468:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <init_tasks_stack+0xf0>)
 800046c:	4a2f      	ldr	r2, [pc, #188]	; (800052c <init_tasks_stack+0x104>)
 800046e:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000470:	4b29      	ldr	r3, [pc, #164]	; (8000518 <init_tasks_stack+0xf0>)
 8000472:	4a2f      	ldr	r2, [pc, #188]	; (8000530 <init_tasks_stack+0x108>)
 8000474:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000476:	4b28      	ldr	r3, [pc, #160]	; (8000518 <init_tasks_stack+0xf0>)
 8000478:	4a2e      	ldr	r2, [pc, #184]	; (8000534 <init_tasks_stack+0x10c>)
 800047a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <init_tasks_stack+0xf0>)
 800047e:	4a2e      	ldr	r2, [pc, #184]	; (8000538 <init_tasks_stack+0x110>)
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000482:	4b25      	ldr	r3, [pc, #148]	; (8000518 <init_tasks_stack+0xf0>)
 8000484:	4a2d      	ldr	r2, [pc, #180]	; (800053c <init_tasks_stack+0x114>)
 8000486:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000488:	4b23      	ldr	r3, [pc, #140]	; (8000518 <init_tasks_stack+0xf0>)
 800048a:	4a2d      	ldr	r2, [pc, #180]	; (8000540 <init_tasks_stack+0x118>)
 800048c:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 800048e:	2300      	movs	r3, #0
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	e037      	b.n	8000504 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000494:	4a20      	ldr	r2, [pc, #128]	; (8000518 <init_tasks_stack+0xf0>)
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	4413      	add	r3, r2
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	3b04      	subs	r3, #4
 80004a4:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004ac:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3b04      	subs	r3, #4
 80004b2:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80004b4:	4a18      	ldr	r2, [pc, #96]	; (8000518 <init_tasks_stack+0xf0>)
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	4413      	add	r3, r2
 80004bc:	330c      	adds	r3, #12
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3b04      	subs	r3, #4
 80004ca:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f06f 0202 	mvn.w	r2, #2
 80004d2:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	e008      	b.n	80004ec <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	3b04      	subs	r3, #4
 80004de:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b0c      	cmp	r3, #12
 80004f0:	ddf3      	ble.n	80004da <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	4908      	ldr	r1, [pc, #32]	; (8000518 <init_tasks_stack+0xf0>)
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	440b      	add	r3, r1
 80004fc:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	3301      	adds	r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	2b04      	cmp	r3, #4
 8000508:	ddc4      	ble.n	8000494 <init_tasks_stack+0x6c>


	}

}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	20000094 	.word	0x20000094
 800051c:	2001f000 	.word	0x2001f000
 8000520:	20020000 	.word	0x20020000
 8000524:	2001fc00 	.word	0x2001fc00
 8000528:	2001f800 	.word	0x2001f800
 800052c:	2001f400 	.word	0x2001f400
 8000530:	08000319 	.word	0x08000319
 8000534:	08000321 	.word	0x08000321
 8000538:	08000345 	.word	0x08000345
 800053c:	08000369 	.word	0x08000369
 8000540:	0800038d 	.word	0x0800038d

08000544 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <enable_processor_faults+0x3c>)
 800054c:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	601a      	str	r2, [r3, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed24 	.word	0xe000ed24

08000584 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <get_psp_value+0x1c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <get_psp_value+0x20>)
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4413      	add	r3, r2
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000094 	.word	0x20000094

080005a8 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <save_psp_value+0x24>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <save_psp_value+0x28>)
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	4413      	add	r3, r2
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000094 	.word	0x20000094

080005d4 <update_next_task>:


void update_next_task(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005da:	23ff      	movs	r3, #255	; 0xff
 80005dc:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	e024      	b.n	800062e <update_next_task+0x5a>
	{
		current_task++;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <update_next_task+0x7c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <update_next_task+0x7c>)
 80005ee:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <update_next_task+0x7c>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <update_next_task+0x80>)
 80005f6:	fba3 1302 	umull	r1, r3, r3, r2
 80005fa:	0899      	lsrs	r1, r3, #2
 80005fc:	460b      	mov	r3, r1
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	440b      	add	r3, r1
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <update_next_task+0x7c>)
 8000608:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <update_next_task+0x7c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <update_next_task+0x84>)
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	4413      	add	r3, r2
 8000614:	3308      	adds	r3, #8
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d103      	bne.n	8000628 <update_next_task+0x54>
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <update_next_task+0x7c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d106      	bne.n	8000636 <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2b04      	cmp	r3, #4
 8000632:	ddd7      	ble.n	80005e4 <update_next_task+0x10>
 8000634:	e000      	b.n	8000638 <update_next_task+0x64>
			break;
 8000636:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <update_next_task+0x70>
		current_task = 0;
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <update_next_task+0x7c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	20000000 	.word	0x20000000
 8000654:	cccccccd 	.word	0xcccccccd
 8000658:	20000094 	.word	0x20000094

0800065c <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 800065c:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800065e:	f7ff ff91 	bl	8000584 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 8000662:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 8000666:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 800066a:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800066e:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000672:	4770      	bx	lr
}
 8000674:	bf00      	nop

08000676 <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 8000676:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 800067a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 800067e:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 8000680:	f7ff ff92 	bl	80005a8 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 8000684:	f7ff ffa6 	bl	80005d4 <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 8000688:	f7ff ff7c 	bl	8000584 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 800068c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000690:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000694:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000698:	4770      	bx	lr



}
 800069a:	bf00      	nop

0800069c <update_global_tick_count>:


void update_global_tick_count(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <update_global_tick_count+0x18>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <update_global_tick_count+0x18>)
 80006a8:	6013      	str	r3, [r2, #0]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000084 	.word	0x20000084

080006b8 <unblock_tasks>:

void unblock_tasks(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006be:	2301      	movs	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	e01b      	b.n	80006fc <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <unblock_tasks+0x58>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	4413      	add	r3, r2
 80006cc:	3308      	adds	r3, #8
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d010      	beq.n	80006f6 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80006d4:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <unblock_tasks+0x58>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	4413      	add	r3, r2
 80006dc:	3304      	adds	r3, #4
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <unblock_tasks+0x5c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d106      	bne.n	80006f6 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006e8:	4a09      	ldr	r2, [pc, #36]	; (8000710 <unblock_tasks+0x58>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	4413      	add	r3, r2
 80006f0:	3308      	adds	r3, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	dde0      	ble.n	80006c4 <unblock_tasks+0xc>
			}
		}

	}

}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	20000094 	.word	0x20000094
 8000714:	20000084 	.word	0x20000084

08000718 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <SysTick_Handler+0x28>)
 8000720:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 8000722:	f7ff ffbb 	bl	800069c <update_global_tick_count>

    unblock_tasks();
 8000726:	f7ff ffc7 	bl	80006b8 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	e000ed04 	.word	0xe000ed04

08000744 <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000748:	4801      	ldr	r0, [pc, #4]	; (8000750 <HardFault_Handler+0xc>)
 800074a:	f000 f99f 	bl	8000a8c <puts>
	while(1);
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0xa>
 8000750:	08001354 	.word	0x08001354

08000754 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000758:	4801      	ldr	r0, [pc, #4]	; (8000760 <MemManage_Handler+0xc>)
 800075a:	f000 f997 	bl	8000a8c <puts>
	while(1);
 800075e:	e7fe      	b.n	800075e <MemManage_Handler+0xa>
 8000760:	0800136c 	.word	0x0800136c

08000764 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000768:	4801      	ldr	r0, [pc, #4]	; (8000770 <BusFault_Handler+0xc>)
 800076a:	f000 f98f 	bl	8000a8c <puts>
	while(1);
 800076e:	e7fe      	b.n	800076e <BusFault_Handler+0xa>
 8000770:	08001384 	.word	0x08001384

08000774 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <ITM_SendChar+0x48>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <ITM_SendChar+0x48>)
 8000784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000788:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <ITM_SendChar+0x4c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <ITM_SendChar+0x4c>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000796:	bf00      	nop
 8000798:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f8      	beq.n	8000798 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	6013      	str	r3, [r2, #0]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000edfc 	.word	0xe000edfc
 80007c0:	e0000e00 	.word	0xe0000e00

080007c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e00a      	b.n	80007ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007d6:	f3af 8000 	nop.w
 80007da:	4601      	mov	r1, r0
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	b2ca      	uxtb	r2, r1
 80007e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbf0      	blt.n	80007d6 <_read+0x12>
	}

return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e009      	b.n	8000824 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60ba      	str	r2, [r7, #8]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffab 	bl	8000774 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf1      	blt.n	8000810 <_write+0x12>
	}
	return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_close>:

int _close(int file)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	return -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085e:	605a      	str	r2, [r3, #4]
	return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_isatty>:

int _isatty(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return 1;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
	return 0;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x50>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x16>
		heap_end = &end;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <_sbrk+0x50>)
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <_sbrk+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <_sbrk+0x50>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <_sbrk+0x50>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	466a      	mov	r2, sp
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d907      	bls.n	80008da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008ca:	f000 f83f 	bl	800094c <__errno>
 80008ce:	4603      	mov	r3, r0
 80008d0:	220c      	movs	r2, #12
 80008d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
 80008d8:	e006      	b.n	80008e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <_sbrk+0x50>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <_sbrk+0x50>)
 80008e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000088 	.word	0x20000088
 80008f4:	200000f8 	.word	0x200000f8

080008f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000922:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000926:	f000 f817 	bl	8000958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fcdf 	bl	80002ec <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   r0, =_estack
 8000930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800093c:	08001408 	.word	0x08001408
  ldr r2, =_sbss
 8000940:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000944:	200000f4 	.word	0x200000f4

08000948 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC_IRQHandler>
	...

0800094c <__errno>:
 800094c:	4b01      	ldr	r3, [pc, #4]	; (8000954 <__errno+0x8>)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000004 	.word	0x20000004

08000958 <__libc_init_array>:
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	4d0d      	ldr	r5, [pc, #52]	; (8000990 <__libc_init_array+0x38>)
 800095c:	4c0d      	ldr	r4, [pc, #52]	; (8000994 <__libc_init_array+0x3c>)
 800095e:	1b64      	subs	r4, r4, r5
 8000960:	10a4      	asrs	r4, r4, #2
 8000962:	2600      	movs	r6, #0
 8000964:	42a6      	cmp	r6, r4
 8000966:	d109      	bne.n	800097c <__libc_init_array+0x24>
 8000968:	4d0b      	ldr	r5, [pc, #44]	; (8000998 <__libc_init_array+0x40>)
 800096a:	4c0c      	ldr	r4, [pc, #48]	; (800099c <__libc_init_array+0x44>)
 800096c:	f000 fce6 	bl	800133c <_init>
 8000970:	1b64      	subs	r4, r4, r5
 8000972:	10a4      	asrs	r4, r4, #2
 8000974:	2600      	movs	r6, #0
 8000976:	42a6      	cmp	r6, r4
 8000978:	d105      	bne.n	8000986 <__libc_init_array+0x2e>
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000980:	4798      	blx	r3
 8000982:	3601      	adds	r6, #1
 8000984:	e7ee      	b.n	8000964 <__libc_init_array+0xc>
 8000986:	f855 3b04 	ldr.w	r3, [r5], #4
 800098a:	4798      	blx	r3
 800098c:	3601      	adds	r6, #1
 800098e:	e7f2      	b.n	8000976 <__libc_init_array+0x1e>
 8000990:	08001400 	.word	0x08001400
 8000994:	08001400 	.word	0x08001400
 8000998:	08001400 	.word	0x08001400
 800099c:	08001404 	.word	0x08001404

080009a0 <memset>:
 80009a0:	4402      	add	r2, r0
 80009a2:	4603      	mov	r3, r0
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d100      	bne.n	80009aa <memset+0xa>
 80009a8:	4770      	bx	lr
 80009aa:	f803 1b01 	strb.w	r1, [r3], #1
 80009ae:	e7f9      	b.n	80009a4 <memset+0x4>

080009b0 <_puts_r>:
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	460e      	mov	r6, r1
 80009b4:	4605      	mov	r5, r0
 80009b6:	b118      	cbz	r0, 80009c0 <_puts_r+0x10>
 80009b8:	6983      	ldr	r3, [r0, #24]
 80009ba:	b90b      	cbnz	r3, 80009c0 <_puts_r+0x10>
 80009bc:	f000 fa48 	bl	8000e50 <__sinit>
 80009c0:	69ab      	ldr	r3, [r5, #24]
 80009c2:	68ac      	ldr	r4, [r5, #8]
 80009c4:	b913      	cbnz	r3, 80009cc <_puts_r+0x1c>
 80009c6:	4628      	mov	r0, r5
 80009c8:	f000 fa42 	bl	8000e50 <__sinit>
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <_puts_r+0xd0>)
 80009ce:	429c      	cmp	r4, r3
 80009d0:	d120      	bne.n	8000a14 <_puts_r+0x64>
 80009d2:	686c      	ldr	r4, [r5, #4]
 80009d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009d6:	07db      	lsls	r3, r3, #31
 80009d8:	d405      	bmi.n	80009e6 <_puts_r+0x36>
 80009da:	89a3      	ldrh	r3, [r4, #12]
 80009dc:	0598      	lsls	r0, r3, #22
 80009de:	d402      	bmi.n	80009e6 <_puts_r+0x36>
 80009e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009e2:	f000 fad3 	bl	8000f8c <__retarget_lock_acquire_recursive>
 80009e6:	89a3      	ldrh	r3, [r4, #12]
 80009e8:	0719      	lsls	r1, r3, #28
 80009ea:	d51d      	bpl.n	8000a28 <_puts_r+0x78>
 80009ec:	6923      	ldr	r3, [r4, #16]
 80009ee:	b1db      	cbz	r3, 8000a28 <_puts_r+0x78>
 80009f0:	3e01      	subs	r6, #1
 80009f2:	68a3      	ldr	r3, [r4, #8]
 80009f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009f8:	3b01      	subs	r3, #1
 80009fa:	60a3      	str	r3, [r4, #8]
 80009fc:	bb39      	cbnz	r1, 8000a4e <_puts_r+0x9e>
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da38      	bge.n	8000a74 <_puts_r+0xc4>
 8000a02:	4622      	mov	r2, r4
 8000a04:	210a      	movs	r1, #10
 8000a06:	4628      	mov	r0, r5
 8000a08:	f000 f848 	bl	8000a9c <__swbuf_r>
 8000a0c:	3001      	adds	r0, #1
 8000a0e:	d011      	beq.n	8000a34 <_puts_r+0x84>
 8000a10:	250a      	movs	r5, #10
 8000a12:	e011      	b.n	8000a38 <_puts_r+0x88>
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <_puts_r+0xd4>)
 8000a16:	429c      	cmp	r4, r3
 8000a18:	d101      	bne.n	8000a1e <_puts_r+0x6e>
 8000a1a:	68ac      	ldr	r4, [r5, #8]
 8000a1c:	e7da      	b.n	80009d4 <_puts_r+0x24>
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <_puts_r+0xd8>)
 8000a20:	429c      	cmp	r4, r3
 8000a22:	bf08      	it	eq
 8000a24:	68ec      	ldreq	r4, [r5, #12]
 8000a26:	e7d5      	b.n	80009d4 <_puts_r+0x24>
 8000a28:	4621      	mov	r1, r4
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	f000 f888 	bl	8000b40 <__swsetup_r>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d0dd      	beq.n	80009f0 <_puts_r+0x40>
 8000a34:	f04f 35ff 	mov.w	r5, #4294967295
 8000a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a3a:	07da      	lsls	r2, r3, #31
 8000a3c:	d405      	bmi.n	8000a4a <_puts_r+0x9a>
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	059b      	lsls	r3, r3, #22
 8000a42:	d402      	bmi.n	8000a4a <_puts_r+0x9a>
 8000a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a46:	f000 faa2 	bl	8000f8e <__retarget_lock_release_recursive>
 8000a4a:	4628      	mov	r0, r5
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da04      	bge.n	8000a5c <_puts_r+0xac>
 8000a52:	69a2      	ldr	r2, [r4, #24]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dc06      	bgt.n	8000a66 <_puts_r+0xb6>
 8000a58:	290a      	cmp	r1, #10
 8000a5a:	d004      	beq.n	8000a66 <_puts_r+0xb6>
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	6022      	str	r2, [r4, #0]
 8000a62:	7019      	strb	r1, [r3, #0]
 8000a64:	e7c5      	b.n	80009f2 <_puts_r+0x42>
 8000a66:	4622      	mov	r2, r4
 8000a68:	4628      	mov	r0, r5
 8000a6a:	f000 f817 	bl	8000a9c <__swbuf_r>
 8000a6e:	3001      	adds	r0, #1
 8000a70:	d1bf      	bne.n	80009f2 <_puts_r+0x42>
 8000a72:	e7df      	b.n	8000a34 <_puts_r+0x84>
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	250a      	movs	r5, #10
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	6022      	str	r2, [r4, #0]
 8000a7c:	701d      	strb	r5, [r3, #0]
 8000a7e:	e7db      	b.n	8000a38 <_puts_r+0x88>
 8000a80:	080013c0 	.word	0x080013c0
 8000a84:	080013e0 	.word	0x080013e0
 8000a88:	080013a0 	.word	0x080013a0

08000a8c <puts>:
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <puts+0xc>)
 8000a8e:	4601      	mov	r1, r0
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	f7ff bf8d 	b.w	80009b0 <_puts_r>
 8000a96:	bf00      	nop
 8000a98:	20000004 	.word	0x20000004

08000a9c <__swbuf_r>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	460e      	mov	r6, r1
 8000aa0:	4614      	mov	r4, r2
 8000aa2:	4605      	mov	r5, r0
 8000aa4:	b118      	cbz	r0, 8000aae <__swbuf_r+0x12>
 8000aa6:	6983      	ldr	r3, [r0, #24]
 8000aa8:	b90b      	cbnz	r3, 8000aae <__swbuf_r+0x12>
 8000aaa:	f000 f9d1 	bl	8000e50 <__sinit>
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <__swbuf_r+0x98>)
 8000ab0:	429c      	cmp	r4, r3
 8000ab2:	d12b      	bne.n	8000b0c <__swbuf_r+0x70>
 8000ab4:	686c      	ldr	r4, [r5, #4]
 8000ab6:	69a3      	ldr	r3, [r4, #24]
 8000ab8:	60a3      	str	r3, [r4, #8]
 8000aba:	89a3      	ldrh	r3, [r4, #12]
 8000abc:	071a      	lsls	r2, r3, #28
 8000abe:	d52f      	bpl.n	8000b20 <__swbuf_r+0x84>
 8000ac0:	6923      	ldr	r3, [r4, #16]
 8000ac2:	b36b      	cbz	r3, 8000b20 <__swbuf_r+0x84>
 8000ac4:	6923      	ldr	r3, [r4, #16]
 8000ac6:	6820      	ldr	r0, [r4, #0]
 8000ac8:	1ac0      	subs	r0, r0, r3
 8000aca:	6963      	ldr	r3, [r4, #20]
 8000acc:	b2f6      	uxtb	r6, r6
 8000ace:	4283      	cmp	r3, r0
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	dc04      	bgt.n	8000ade <__swbuf_r+0x42>
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	f000 f926 	bl	8000d28 <_fflush_r>
 8000adc:	bb30      	cbnz	r0, 8000b2c <__swbuf_r+0x90>
 8000ade:	68a3      	ldr	r3, [r4, #8]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	60a3      	str	r3, [r4, #8]
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	6022      	str	r2, [r4, #0]
 8000aea:	701e      	strb	r6, [r3, #0]
 8000aec:	6963      	ldr	r3, [r4, #20]
 8000aee:	3001      	adds	r0, #1
 8000af0:	4283      	cmp	r3, r0
 8000af2:	d004      	beq.n	8000afe <__swbuf_r+0x62>
 8000af4:	89a3      	ldrh	r3, [r4, #12]
 8000af6:	07db      	lsls	r3, r3, #31
 8000af8:	d506      	bpl.n	8000b08 <__swbuf_r+0x6c>
 8000afa:	2e0a      	cmp	r6, #10
 8000afc:	d104      	bne.n	8000b08 <__swbuf_r+0x6c>
 8000afe:	4621      	mov	r1, r4
 8000b00:	4628      	mov	r0, r5
 8000b02:	f000 f911 	bl	8000d28 <_fflush_r>
 8000b06:	b988      	cbnz	r0, 8000b2c <__swbuf_r+0x90>
 8000b08:	4638      	mov	r0, r7
 8000b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <__swbuf_r+0x9c>)
 8000b0e:	429c      	cmp	r4, r3
 8000b10:	d101      	bne.n	8000b16 <__swbuf_r+0x7a>
 8000b12:	68ac      	ldr	r4, [r5, #8]
 8000b14:	e7cf      	b.n	8000ab6 <__swbuf_r+0x1a>
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <__swbuf_r+0xa0>)
 8000b18:	429c      	cmp	r4, r3
 8000b1a:	bf08      	it	eq
 8000b1c:	68ec      	ldreq	r4, [r5, #12]
 8000b1e:	e7ca      	b.n	8000ab6 <__swbuf_r+0x1a>
 8000b20:	4621      	mov	r1, r4
 8000b22:	4628      	mov	r0, r5
 8000b24:	f000 f80c 	bl	8000b40 <__swsetup_r>
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d0cb      	beq.n	8000ac4 <__swbuf_r+0x28>
 8000b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8000b30:	e7ea      	b.n	8000b08 <__swbuf_r+0x6c>
 8000b32:	bf00      	nop
 8000b34:	080013c0 	.word	0x080013c0
 8000b38:	080013e0 	.word	0x080013e0
 8000b3c:	080013a0 	.word	0x080013a0

08000b40 <__swsetup_r>:
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <__swsetup_r+0xcc>)
 8000b42:	b570      	push	{r4, r5, r6, lr}
 8000b44:	681d      	ldr	r5, [r3, #0]
 8000b46:	4606      	mov	r6, r0
 8000b48:	460c      	mov	r4, r1
 8000b4a:	b125      	cbz	r5, 8000b56 <__swsetup_r+0x16>
 8000b4c:	69ab      	ldr	r3, [r5, #24]
 8000b4e:	b913      	cbnz	r3, 8000b56 <__swsetup_r+0x16>
 8000b50:	4628      	mov	r0, r5
 8000b52:	f000 f97d 	bl	8000e50 <__sinit>
 8000b56:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <__swsetup_r+0xd0>)
 8000b58:	429c      	cmp	r4, r3
 8000b5a:	d10f      	bne.n	8000b7c <__swsetup_r+0x3c>
 8000b5c:	686c      	ldr	r4, [r5, #4]
 8000b5e:	89a3      	ldrh	r3, [r4, #12]
 8000b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b64:	0719      	lsls	r1, r3, #28
 8000b66:	d42c      	bmi.n	8000bc2 <__swsetup_r+0x82>
 8000b68:	06dd      	lsls	r5, r3, #27
 8000b6a:	d411      	bmi.n	8000b90 <__swsetup_r+0x50>
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	6033      	str	r3, [r6, #0]
 8000b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b74:	81a3      	strh	r3, [r4, #12]
 8000b76:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7a:	e03e      	b.n	8000bfa <__swsetup_r+0xba>
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <__swsetup_r+0xd4>)
 8000b7e:	429c      	cmp	r4, r3
 8000b80:	d101      	bne.n	8000b86 <__swsetup_r+0x46>
 8000b82:	68ac      	ldr	r4, [r5, #8]
 8000b84:	e7eb      	b.n	8000b5e <__swsetup_r+0x1e>
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <__swsetup_r+0xd8>)
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	bf08      	it	eq
 8000b8c:	68ec      	ldreq	r4, [r5, #12]
 8000b8e:	e7e6      	b.n	8000b5e <__swsetup_r+0x1e>
 8000b90:	0758      	lsls	r0, r3, #29
 8000b92:	d512      	bpl.n	8000bba <__swsetup_r+0x7a>
 8000b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b96:	b141      	cbz	r1, 8000baa <__swsetup_r+0x6a>
 8000b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d002      	beq.n	8000ba6 <__swsetup_r+0x66>
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f000 fa59 	bl	8001058 <_free_r>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8000baa:	89a3      	ldrh	r3, [r4, #12]
 8000bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bb0:	81a3      	strh	r3, [r4, #12]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	6063      	str	r3, [r4, #4]
 8000bb6:	6923      	ldr	r3, [r4, #16]
 8000bb8:	6023      	str	r3, [r4, #0]
 8000bba:	89a3      	ldrh	r3, [r4, #12]
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	81a3      	strh	r3, [r4, #12]
 8000bc2:	6923      	ldr	r3, [r4, #16]
 8000bc4:	b94b      	cbnz	r3, 8000bda <__swsetup_r+0x9a>
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bd0:	d003      	beq.n	8000bda <__swsetup_r+0x9a>
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	f000 f9ff 	bl	8000fd8 <__smakebuf_r>
 8000bda:	89a0      	ldrh	r0, [r4, #12]
 8000bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000be0:	f010 0301 	ands.w	r3, r0, #1
 8000be4:	d00a      	beq.n	8000bfc <__swsetup_r+0xbc>
 8000be6:	2300      	movs	r3, #0
 8000be8:	60a3      	str	r3, [r4, #8]
 8000bea:	6963      	ldr	r3, [r4, #20]
 8000bec:	425b      	negs	r3, r3
 8000bee:	61a3      	str	r3, [r4, #24]
 8000bf0:	6923      	ldr	r3, [r4, #16]
 8000bf2:	b943      	cbnz	r3, 8000c06 <__swsetup_r+0xc6>
 8000bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000bf8:	d1ba      	bne.n	8000b70 <__swsetup_r+0x30>
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	0781      	lsls	r1, r0, #30
 8000bfe:	bf58      	it	pl
 8000c00:	6963      	ldrpl	r3, [r4, #20]
 8000c02:	60a3      	str	r3, [r4, #8]
 8000c04:	e7f4      	b.n	8000bf0 <__swsetup_r+0xb0>
 8000c06:	2000      	movs	r0, #0
 8000c08:	e7f7      	b.n	8000bfa <__swsetup_r+0xba>
 8000c0a:	bf00      	nop
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	080013c0 	.word	0x080013c0
 8000c14:	080013e0 	.word	0x080013e0
 8000c18:	080013a0 	.word	0x080013a0

08000c1c <__sflush_r>:
 8000c1c:	898a      	ldrh	r2, [r1, #12]
 8000c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c22:	4605      	mov	r5, r0
 8000c24:	0710      	lsls	r0, r2, #28
 8000c26:	460c      	mov	r4, r1
 8000c28:	d458      	bmi.n	8000cdc <__sflush_r+0xc0>
 8000c2a:	684b      	ldr	r3, [r1, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	dc05      	bgt.n	8000c3c <__sflush_r+0x20>
 8000c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	dc02      	bgt.n	8000c3c <__sflush_r+0x20>
 8000c36:	2000      	movs	r0, #0
 8000c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d0f9      	beq.n	8000c36 <__sflush_r+0x1a>
 8000c42:	2300      	movs	r3, #0
 8000c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c48:	682f      	ldr	r7, [r5, #0]
 8000c4a:	602b      	str	r3, [r5, #0]
 8000c4c:	d032      	beq.n	8000cb4 <__sflush_r+0x98>
 8000c4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c50:	89a3      	ldrh	r3, [r4, #12]
 8000c52:	075a      	lsls	r2, r3, #29
 8000c54:	d505      	bpl.n	8000c62 <__sflush_r+0x46>
 8000c56:	6863      	ldr	r3, [r4, #4]
 8000c58:	1ac0      	subs	r0, r0, r3
 8000c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c5c:	b10b      	cbz	r3, 8000c62 <__sflush_r+0x46>
 8000c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c60:	1ac0      	subs	r0, r0, r3
 8000c62:	2300      	movs	r3, #0
 8000c64:	4602      	mov	r2, r0
 8000c66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c68:	6a21      	ldr	r1, [r4, #32]
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	47b0      	blx	r6
 8000c6e:	1c43      	adds	r3, r0, #1
 8000c70:	89a3      	ldrh	r3, [r4, #12]
 8000c72:	d106      	bne.n	8000c82 <__sflush_r+0x66>
 8000c74:	6829      	ldr	r1, [r5, #0]
 8000c76:	291d      	cmp	r1, #29
 8000c78:	d82c      	bhi.n	8000cd4 <__sflush_r+0xb8>
 8000c7a:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <__sflush_r+0x108>)
 8000c7c:	40ca      	lsrs	r2, r1
 8000c7e:	07d6      	lsls	r6, r2, #31
 8000c80:	d528      	bpl.n	8000cd4 <__sflush_r+0xb8>
 8000c82:	2200      	movs	r2, #0
 8000c84:	6062      	str	r2, [r4, #4]
 8000c86:	04d9      	lsls	r1, r3, #19
 8000c88:	6922      	ldr	r2, [r4, #16]
 8000c8a:	6022      	str	r2, [r4, #0]
 8000c8c:	d504      	bpl.n	8000c98 <__sflush_r+0x7c>
 8000c8e:	1c42      	adds	r2, r0, #1
 8000c90:	d101      	bne.n	8000c96 <__sflush_r+0x7a>
 8000c92:	682b      	ldr	r3, [r5, #0]
 8000c94:	b903      	cbnz	r3, 8000c98 <__sflush_r+0x7c>
 8000c96:	6560      	str	r0, [r4, #84]	; 0x54
 8000c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c9a:	602f      	str	r7, [r5, #0]
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d0ca      	beq.n	8000c36 <__sflush_r+0x1a>
 8000ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d002      	beq.n	8000cae <__sflush_r+0x92>
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f000 f9d5 	bl	8001058 <_free_r>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8000cb2:	e7c1      	b.n	8000c38 <__sflush_r+0x1c>
 8000cb4:	6a21      	ldr	r1, [r4, #32]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4628      	mov	r0, r5
 8000cba:	47b0      	blx	r6
 8000cbc:	1c41      	adds	r1, r0, #1
 8000cbe:	d1c7      	bne.n	8000c50 <__sflush_r+0x34>
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0c4      	beq.n	8000c50 <__sflush_r+0x34>
 8000cc6:	2b1d      	cmp	r3, #29
 8000cc8:	d001      	beq.n	8000cce <__sflush_r+0xb2>
 8000cca:	2b16      	cmp	r3, #22
 8000ccc:	d101      	bne.n	8000cd2 <__sflush_r+0xb6>
 8000cce:	602f      	str	r7, [r5, #0]
 8000cd0:	e7b1      	b.n	8000c36 <__sflush_r+0x1a>
 8000cd2:	89a3      	ldrh	r3, [r4, #12]
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	81a3      	strh	r3, [r4, #12]
 8000cda:	e7ad      	b.n	8000c38 <__sflush_r+0x1c>
 8000cdc:	690f      	ldr	r7, [r1, #16]
 8000cde:	2f00      	cmp	r7, #0
 8000ce0:	d0a9      	beq.n	8000c36 <__sflush_r+0x1a>
 8000ce2:	0793      	lsls	r3, r2, #30
 8000ce4:	680e      	ldr	r6, [r1, #0]
 8000ce6:	bf08      	it	eq
 8000ce8:	694b      	ldreq	r3, [r1, #20]
 8000cea:	600f      	str	r7, [r1, #0]
 8000cec:	bf18      	it	ne
 8000cee:	2300      	movne	r3, #0
 8000cf0:	eba6 0807 	sub.w	r8, r6, r7
 8000cf4:	608b      	str	r3, [r1, #8]
 8000cf6:	f1b8 0f00 	cmp.w	r8, #0
 8000cfa:	dd9c      	ble.n	8000c36 <__sflush_r+0x1a>
 8000cfc:	6a21      	ldr	r1, [r4, #32]
 8000cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d00:	4643      	mov	r3, r8
 8000d02:	463a      	mov	r2, r7
 8000d04:	4628      	mov	r0, r5
 8000d06:	47b0      	blx	r6
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	dc06      	bgt.n	8000d1a <__sflush_r+0xfe>
 8000d0c:	89a3      	ldrh	r3, [r4, #12]
 8000d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d12:	81a3      	strh	r3, [r4, #12]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	e78e      	b.n	8000c38 <__sflush_r+0x1c>
 8000d1a:	4407      	add	r7, r0
 8000d1c:	eba8 0800 	sub.w	r8, r8, r0
 8000d20:	e7e9      	b.n	8000cf6 <__sflush_r+0xda>
 8000d22:	bf00      	nop
 8000d24:	20400001 	.word	0x20400001

08000d28 <_fflush_r>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	690b      	ldr	r3, [r1, #16]
 8000d2c:	4605      	mov	r5, r0
 8000d2e:	460c      	mov	r4, r1
 8000d30:	b913      	cbnz	r3, 8000d38 <_fflush_r+0x10>
 8000d32:	2500      	movs	r5, #0
 8000d34:	4628      	mov	r0, r5
 8000d36:	bd38      	pop	{r3, r4, r5, pc}
 8000d38:	b118      	cbz	r0, 8000d42 <_fflush_r+0x1a>
 8000d3a:	6983      	ldr	r3, [r0, #24]
 8000d3c:	b90b      	cbnz	r3, 8000d42 <_fflush_r+0x1a>
 8000d3e:	f000 f887 	bl	8000e50 <__sinit>
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <_fflush_r+0x6c>)
 8000d44:	429c      	cmp	r4, r3
 8000d46:	d11b      	bne.n	8000d80 <_fflush_r+0x58>
 8000d48:	686c      	ldr	r4, [r5, #4]
 8000d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0ef      	beq.n	8000d32 <_fflush_r+0xa>
 8000d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d54:	07d0      	lsls	r0, r2, #31
 8000d56:	d404      	bmi.n	8000d62 <_fflush_r+0x3a>
 8000d58:	0599      	lsls	r1, r3, #22
 8000d5a:	d402      	bmi.n	8000d62 <_fflush_r+0x3a>
 8000d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d5e:	f000 f915 	bl	8000f8c <__retarget_lock_acquire_recursive>
 8000d62:	4628      	mov	r0, r5
 8000d64:	4621      	mov	r1, r4
 8000d66:	f7ff ff59 	bl	8000c1c <__sflush_r>
 8000d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d6c:	07da      	lsls	r2, r3, #31
 8000d6e:	4605      	mov	r5, r0
 8000d70:	d4e0      	bmi.n	8000d34 <_fflush_r+0xc>
 8000d72:	89a3      	ldrh	r3, [r4, #12]
 8000d74:	059b      	lsls	r3, r3, #22
 8000d76:	d4dd      	bmi.n	8000d34 <_fflush_r+0xc>
 8000d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d7a:	f000 f908 	bl	8000f8e <__retarget_lock_release_recursive>
 8000d7e:	e7d9      	b.n	8000d34 <_fflush_r+0xc>
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <_fflush_r+0x70>)
 8000d82:	429c      	cmp	r4, r3
 8000d84:	d101      	bne.n	8000d8a <_fflush_r+0x62>
 8000d86:	68ac      	ldr	r4, [r5, #8]
 8000d88:	e7df      	b.n	8000d4a <_fflush_r+0x22>
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <_fflush_r+0x74>)
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	bf08      	it	eq
 8000d90:	68ec      	ldreq	r4, [r5, #12]
 8000d92:	e7da      	b.n	8000d4a <_fflush_r+0x22>
 8000d94:	080013c0 	.word	0x080013c0
 8000d98:	080013e0 	.word	0x080013e0
 8000d9c:	080013a0 	.word	0x080013a0

08000da0 <std>:
 8000da0:	2300      	movs	r3, #0
 8000da2:	b510      	push	{r4, lr}
 8000da4:	4604      	mov	r4, r0
 8000da6:	e9c0 3300 	strd	r3, r3, [r0]
 8000daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dae:	6083      	str	r3, [r0, #8]
 8000db0:	8181      	strh	r1, [r0, #12]
 8000db2:	6643      	str	r3, [r0, #100]	; 0x64
 8000db4:	81c2      	strh	r2, [r0, #14]
 8000db6:	6183      	str	r3, [r0, #24]
 8000db8:	4619      	mov	r1, r3
 8000dba:	2208      	movs	r2, #8
 8000dbc:	305c      	adds	r0, #92	; 0x5c
 8000dbe:	f7ff fdef 	bl	80009a0 <memset>
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <std+0x38>)
 8000dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <std+0x3c>)
 8000dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <std+0x40>)
 8000dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <std+0x44>)
 8000dd0:	6224      	str	r4, [r4, #32]
 8000dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	bf00      	nop
 8000dd8:	080011cd 	.word	0x080011cd
 8000ddc:	080011ef 	.word	0x080011ef
 8000de0:	08001227 	.word	0x08001227
 8000de4:	0800124b 	.word	0x0800124b

08000de8 <_cleanup_r>:
 8000de8:	4901      	ldr	r1, [pc, #4]	; (8000df0 <_cleanup_r+0x8>)
 8000dea:	f000 b8af 	b.w	8000f4c <_fwalk_reent>
 8000dee:	bf00      	nop
 8000df0:	08000d29 	.word	0x08000d29

08000df4 <__sfmoreglue>:
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	1e4a      	subs	r2, r1, #1
 8000df8:	2568      	movs	r5, #104	; 0x68
 8000dfa:	4355      	muls	r5, r2
 8000dfc:	460e      	mov	r6, r1
 8000dfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e02:	f000 f979 	bl	80010f8 <_malloc_r>
 8000e06:	4604      	mov	r4, r0
 8000e08:	b140      	cbz	r0, 8000e1c <__sfmoreglue+0x28>
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	e9c0 1600 	strd	r1, r6, [r0]
 8000e10:	300c      	adds	r0, #12
 8000e12:	60a0      	str	r0, [r4, #8]
 8000e14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e18:	f7ff fdc2 	bl	80009a0 <memset>
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}

08000e20 <__sfp_lock_acquire>:
 8000e20:	4801      	ldr	r0, [pc, #4]	; (8000e28 <__sfp_lock_acquire+0x8>)
 8000e22:	f000 b8b3 	b.w	8000f8c <__retarget_lock_acquire_recursive>
 8000e26:	bf00      	nop
 8000e28:	200000ec 	.word	0x200000ec

08000e2c <__sfp_lock_release>:
 8000e2c:	4801      	ldr	r0, [pc, #4]	; (8000e34 <__sfp_lock_release+0x8>)
 8000e2e:	f000 b8ae 	b.w	8000f8e <__retarget_lock_release_recursive>
 8000e32:	bf00      	nop
 8000e34:	200000ec 	.word	0x200000ec

08000e38 <__sinit_lock_acquire>:
 8000e38:	4801      	ldr	r0, [pc, #4]	; (8000e40 <__sinit_lock_acquire+0x8>)
 8000e3a:	f000 b8a7 	b.w	8000f8c <__retarget_lock_acquire_recursive>
 8000e3e:	bf00      	nop
 8000e40:	200000e7 	.word	0x200000e7

08000e44 <__sinit_lock_release>:
 8000e44:	4801      	ldr	r0, [pc, #4]	; (8000e4c <__sinit_lock_release+0x8>)
 8000e46:	f000 b8a2 	b.w	8000f8e <__retarget_lock_release_recursive>
 8000e4a:	bf00      	nop
 8000e4c:	200000e7 	.word	0x200000e7

08000e50 <__sinit>:
 8000e50:	b510      	push	{r4, lr}
 8000e52:	4604      	mov	r4, r0
 8000e54:	f7ff fff0 	bl	8000e38 <__sinit_lock_acquire>
 8000e58:	69a3      	ldr	r3, [r4, #24]
 8000e5a:	b11b      	cbz	r3, 8000e64 <__sinit+0x14>
 8000e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e60:	f7ff bff0 	b.w	8000e44 <__sinit_lock_release>
 8000e64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e68:	6523      	str	r3, [r4, #80]	; 0x50
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <__sinit+0x68>)
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <__sinit+0x6c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e72:	42a3      	cmp	r3, r4
 8000e74:	bf04      	itt	eq
 8000e76:	2301      	moveq	r3, #1
 8000e78:	61a3      	streq	r3, [r4, #24]
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f000 f820 	bl	8000ec0 <__sfp>
 8000e80:	6060      	str	r0, [r4, #4]
 8000e82:	4620      	mov	r0, r4
 8000e84:	f000 f81c 	bl	8000ec0 <__sfp>
 8000e88:	60a0      	str	r0, [r4, #8]
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f000 f818 	bl	8000ec0 <__sfp>
 8000e90:	2200      	movs	r2, #0
 8000e92:	60e0      	str	r0, [r4, #12]
 8000e94:	2104      	movs	r1, #4
 8000e96:	6860      	ldr	r0, [r4, #4]
 8000e98:	f7ff ff82 	bl	8000da0 <std>
 8000e9c:	68a0      	ldr	r0, [r4, #8]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2109      	movs	r1, #9
 8000ea2:	f7ff ff7d 	bl	8000da0 <std>
 8000ea6:	68e0      	ldr	r0, [r4, #12]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	2112      	movs	r1, #18
 8000eac:	f7ff ff78 	bl	8000da0 <std>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61a3      	str	r3, [r4, #24]
 8000eb4:	e7d2      	b.n	8000e5c <__sinit+0xc>
 8000eb6:	bf00      	nop
 8000eb8:	0800139c 	.word	0x0800139c
 8000ebc:	08000de9 	.word	0x08000de9

08000ec0 <__sfp>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	4607      	mov	r7, r0
 8000ec4:	f7ff ffac 	bl	8000e20 <__sfp_lock_acquire>
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <__sfp+0x84>)
 8000eca:	681e      	ldr	r6, [r3, #0]
 8000ecc:	69b3      	ldr	r3, [r6, #24]
 8000ece:	b913      	cbnz	r3, 8000ed6 <__sfp+0x16>
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	f7ff ffbd 	bl	8000e50 <__sinit>
 8000ed6:	3648      	adds	r6, #72	; 0x48
 8000ed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	d503      	bpl.n	8000ee8 <__sfp+0x28>
 8000ee0:	6833      	ldr	r3, [r6, #0]
 8000ee2:	b30b      	cbz	r3, 8000f28 <__sfp+0x68>
 8000ee4:	6836      	ldr	r6, [r6, #0]
 8000ee6:	e7f7      	b.n	8000ed8 <__sfp+0x18>
 8000ee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000eec:	b9d5      	cbnz	r5, 8000f24 <__sfp+0x64>
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <__sfp+0x88>)
 8000ef0:	60e3      	str	r3, [r4, #12]
 8000ef2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ef6:	6665      	str	r5, [r4, #100]	; 0x64
 8000ef8:	f000 f847 	bl	8000f8a <__retarget_lock_init_recursive>
 8000efc:	f7ff ff96 	bl	8000e2c <__sfp_lock_release>
 8000f00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f08:	6025      	str	r5, [r4, #0]
 8000f0a:	61a5      	str	r5, [r4, #24]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4629      	mov	r1, r5
 8000f10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f14:	f7ff fd44 	bl	80009a0 <memset>
 8000f18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f20:	4620      	mov	r0, r4
 8000f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f24:	3468      	adds	r4, #104	; 0x68
 8000f26:	e7d9      	b.n	8000edc <__sfp+0x1c>
 8000f28:	2104      	movs	r1, #4
 8000f2a:	4638      	mov	r0, r7
 8000f2c:	f7ff ff62 	bl	8000df4 <__sfmoreglue>
 8000f30:	4604      	mov	r4, r0
 8000f32:	6030      	str	r0, [r6, #0]
 8000f34:	2800      	cmp	r0, #0
 8000f36:	d1d5      	bne.n	8000ee4 <__sfp+0x24>
 8000f38:	f7ff ff78 	bl	8000e2c <__sfp_lock_release>
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	e7ee      	b.n	8000f20 <__sfp+0x60>
 8000f42:	bf00      	nop
 8000f44:	0800139c 	.word	0x0800139c
 8000f48:	ffff0001 	.word	0xffff0001

08000f4c <_fwalk_reent>:
 8000f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f50:	4606      	mov	r6, r0
 8000f52:	4688      	mov	r8, r1
 8000f54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f58:	2700      	movs	r7, #0
 8000f5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f5e:	f1b9 0901 	subs.w	r9, r9, #1
 8000f62:	d505      	bpl.n	8000f70 <_fwalk_reent+0x24>
 8000f64:	6824      	ldr	r4, [r4, #0]
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d1f7      	bne.n	8000f5a <_fwalk_reent+0xe>
 8000f6a:	4638      	mov	r0, r7
 8000f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f70:	89ab      	ldrh	r3, [r5, #12]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d907      	bls.n	8000f86 <_fwalk_reent+0x3a>
 8000f76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	d003      	beq.n	8000f86 <_fwalk_reent+0x3a>
 8000f7e:	4629      	mov	r1, r5
 8000f80:	4630      	mov	r0, r6
 8000f82:	47c0      	blx	r8
 8000f84:	4307      	orrs	r7, r0
 8000f86:	3568      	adds	r5, #104	; 0x68
 8000f88:	e7e9      	b.n	8000f5e <_fwalk_reent+0x12>

08000f8a <__retarget_lock_init_recursive>:
 8000f8a:	4770      	bx	lr

08000f8c <__retarget_lock_acquire_recursive>:
 8000f8c:	4770      	bx	lr

08000f8e <__retarget_lock_release_recursive>:
 8000f8e:	4770      	bx	lr

08000f90 <__swhatbuf_r>:
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	460e      	mov	r6, r1
 8000f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f98:	2900      	cmp	r1, #0
 8000f9a:	b096      	sub	sp, #88	; 0x58
 8000f9c:	4614      	mov	r4, r2
 8000f9e:	461d      	mov	r5, r3
 8000fa0:	da07      	bge.n	8000fb2 <__swhatbuf_r+0x22>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	602b      	str	r3, [r5, #0]
 8000fa6:	89b3      	ldrh	r3, [r6, #12]
 8000fa8:	061a      	lsls	r2, r3, #24
 8000faa:	d410      	bmi.n	8000fce <__swhatbuf_r+0x3e>
 8000fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb0:	e00e      	b.n	8000fd0 <__swhatbuf_r+0x40>
 8000fb2:	466a      	mov	r2, sp
 8000fb4:	f000 f970 	bl	8001298 <_fstat_r>
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	dbf2      	blt.n	8000fa2 <__swhatbuf_r+0x12>
 8000fbc:	9a01      	ldr	r2, [sp, #4]
 8000fbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000fc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000fc6:	425a      	negs	r2, r3
 8000fc8:	415a      	adcs	r2, r3
 8000fca:	602a      	str	r2, [r5, #0]
 8000fcc:	e7ee      	b.n	8000fac <__swhatbuf_r+0x1c>
 8000fce:	2340      	movs	r3, #64	; 0x40
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	6023      	str	r3, [r4, #0]
 8000fd4:	b016      	add	sp, #88	; 0x58
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}

08000fd8 <__smakebuf_r>:
 8000fd8:	898b      	ldrh	r3, [r1, #12]
 8000fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fdc:	079d      	lsls	r5, r3, #30
 8000fde:	4606      	mov	r6, r0
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	d507      	bpl.n	8000ff4 <__smakebuf_r+0x1c>
 8000fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000fe8:	6023      	str	r3, [r4, #0]
 8000fea:	6123      	str	r3, [r4, #16]
 8000fec:	2301      	movs	r3, #1
 8000fee:	6163      	str	r3, [r4, #20]
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	ab01      	add	r3, sp, #4
 8000ff6:	466a      	mov	r2, sp
 8000ff8:	f7ff ffca 	bl	8000f90 <__swhatbuf_r>
 8000ffc:	9900      	ldr	r1, [sp, #0]
 8000ffe:	4605      	mov	r5, r0
 8001000:	4630      	mov	r0, r6
 8001002:	f000 f879 	bl	80010f8 <_malloc_r>
 8001006:	b948      	cbnz	r0, 800101c <__smakebuf_r+0x44>
 8001008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800100c:	059a      	lsls	r2, r3, #22
 800100e:	d4ef      	bmi.n	8000ff0 <__smakebuf_r+0x18>
 8001010:	f023 0303 	bic.w	r3, r3, #3
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	81a3      	strh	r3, [r4, #12]
 800101a:	e7e3      	b.n	8000fe4 <__smakebuf_r+0xc>
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <__smakebuf_r+0x7c>)
 800101e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001020:	89a3      	ldrh	r3, [r4, #12]
 8001022:	6020      	str	r0, [r4, #0]
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	81a3      	strh	r3, [r4, #12]
 800102a:	9b00      	ldr	r3, [sp, #0]
 800102c:	6163      	str	r3, [r4, #20]
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	6120      	str	r0, [r4, #16]
 8001032:	b15b      	cbz	r3, 800104c <__smakebuf_r+0x74>
 8001034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001038:	4630      	mov	r0, r6
 800103a:	f000 f93f 	bl	80012bc <_isatty_r>
 800103e:	b128      	cbz	r0, 800104c <__smakebuf_r+0x74>
 8001040:	89a3      	ldrh	r3, [r4, #12]
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	81a3      	strh	r3, [r4, #12]
 800104c:	89a0      	ldrh	r0, [r4, #12]
 800104e:	4305      	orrs	r5, r0
 8001050:	81a5      	strh	r5, [r4, #12]
 8001052:	e7cd      	b.n	8000ff0 <__smakebuf_r+0x18>
 8001054:	08000de9 	.word	0x08000de9

08001058 <_free_r>:
 8001058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800105a:	2900      	cmp	r1, #0
 800105c:	d048      	beq.n	80010f0 <_free_r+0x98>
 800105e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001062:	9001      	str	r0, [sp, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	f1a1 0404 	sub.w	r4, r1, #4
 800106a:	bfb8      	it	lt
 800106c:	18e4      	addlt	r4, r4, r3
 800106e:	f000 f947 	bl	8001300 <__malloc_lock>
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <_free_r+0x9c>)
 8001074:	9801      	ldr	r0, [sp, #4]
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	4615      	mov	r5, r2
 800107a:	b933      	cbnz	r3, 800108a <_free_r+0x32>
 800107c:	6063      	str	r3, [r4, #4]
 800107e:	6014      	str	r4, [r2, #0]
 8001080:	b003      	add	sp, #12
 8001082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001086:	f000 b941 	b.w	800130c <__malloc_unlock>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d90b      	bls.n	80010a6 <_free_r+0x4e>
 800108e:	6821      	ldr	r1, [r4, #0]
 8001090:	1862      	adds	r2, r4, r1
 8001092:	4293      	cmp	r3, r2
 8001094:	bf04      	itt	eq
 8001096:	681a      	ldreq	r2, [r3, #0]
 8001098:	685b      	ldreq	r3, [r3, #4]
 800109a:	6063      	str	r3, [r4, #4]
 800109c:	bf04      	itt	eq
 800109e:	1852      	addeq	r2, r2, r1
 80010a0:	6022      	streq	r2, [r4, #0]
 80010a2:	602c      	str	r4, [r5, #0]
 80010a4:	e7ec      	b.n	8001080 <_free_r+0x28>
 80010a6:	461a      	mov	r2, r3
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	b10b      	cbz	r3, 80010b0 <_free_r+0x58>
 80010ac:	42a3      	cmp	r3, r4
 80010ae:	d9fa      	bls.n	80010a6 <_free_r+0x4e>
 80010b0:	6811      	ldr	r1, [r2, #0]
 80010b2:	1855      	adds	r5, r2, r1
 80010b4:	42a5      	cmp	r5, r4
 80010b6:	d10b      	bne.n	80010d0 <_free_r+0x78>
 80010b8:	6824      	ldr	r4, [r4, #0]
 80010ba:	4421      	add	r1, r4
 80010bc:	1854      	adds	r4, r2, r1
 80010be:	42a3      	cmp	r3, r4
 80010c0:	6011      	str	r1, [r2, #0]
 80010c2:	d1dd      	bne.n	8001080 <_free_r+0x28>
 80010c4:	681c      	ldr	r4, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	6053      	str	r3, [r2, #4]
 80010ca:	4421      	add	r1, r4
 80010cc:	6011      	str	r1, [r2, #0]
 80010ce:	e7d7      	b.n	8001080 <_free_r+0x28>
 80010d0:	d902      	bls.n	80010d8 <_free_r+0x80>
 80010d2:	230c      	movs	r3, #12
 80010d4:	6003      	str	r3, [r0, #0]
 80010d6:	e7d3      	b.n	8001080 <_free_r+0x28>
 80010d8:	6825      	ldr	r5, [r4, #0]
 80010da:	1961      	adds	r1, r4, r5
 80010dc:	428b      	cmp	r3, r1
 80010de:	bf04      	itt	eq
 80010e0:	6819      	ldreq	r1, [r3, #0]
 80010e2:	685b      	ldreq	r3, [r3, #4]
 80010e4:	6063      	str	r3, [r4, #4]
 80010e6:	bf04      	itt	eq
 80010e8:	1949      	addeq	r1, r1, r5
 80010ea:	6021      	streq	r1, [r4, #0]
 80010ec:	6054      	str	r4, [r2, #4]
 80010ee:	e7c7      	b.n	8001080 <_free_r+0x28>
 80010f0:	b003      	add	sp, #12
 80010f2:	bd30      	pop	{r4, r5, pc}
 80010f4:	2000008c 	.word	0x2000008c

080010f8 <_malloc_r>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	1ccd      	adds	r5, r1, #3
 80010fc:	f025 0503 	bic.w	r5, r5, #3
 8001100:	3508      	adds	r5, #8
 8001102:	2d0c      	cmp	r5, #12
 8001104:	bf38      	it	cc
 8001106:	250c      	movcc	r5, #12
 8001108:	2d00      	cmp	r5, #0
 800110a:	4606      	mov	r6, r0
 800110c:	db01      	blt.n	8001112 <_malloc_r+0x1a>
 800110e:	42a9      	cmp	r1, r5
 8001110:	d903      	bls.n	800111a <_malloc_r+0x22>
 8001112:	230c      	movs	r3, #12
 8001114:	6033      	str	r3, [r6, #0]
 8001116:	2000      	movs	r0, #0
 8001118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800111a:	f000 f8f1 	bl	8001300 <__malloc_lock>
 800111e:	4921      	ldr	r1, [pc, #132]	; (80011a4 <_malloc_r+0xac>)
 8001120:	680a      	ldr	r2, [r1, #0]
 8001122:	4614      	mov	r4, r2
 8001124:	b99c      	cbnz	r4, 800114e <_malloc_r+0x56>
 8001126:	4f20      	ldr	r7, [pc, #128]	; (80011a8 <_malloc_r+0xb0>)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b923      	cbnz	r3, 8001136 <_malloc_r+0x3e>
 800112c:	4621      	mov	r1, r4
 800112e:	4630      	mov	r0, r6
 8001130:	f000 f83c 	bl	80011ac <_sbrk_r>
 8001134:	6038      	str	r0, [r7, #0]
 8001136:	4629      	mov	r1, r5
 8001138:	4630      	mov	r0, r6
 800113a:	f000 f837 	bl	80011ac <_sbrk_r>
 800113e:	1c43      	adds	r3, r0, #1
 8001140:	d123      	bne.n	800118a <_malloc_r+0x92>
 8001142:	230c      	movs	r3, #12
 8001144:	6033      	str	r3, [r6, #0]
 8001146:	4630      	mov	r0, r6
 8001148:	f000 f8e0 	bl	800130c <__malloc_unlock>
 800114c:	e7e3      	b.n	8001116 <_malloc_r+0x1e>
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	1b5b      	subs	r3, r3, r5
 8001152:	d417      	bmi.n	8001184 <_malloc_r+0x8c>
 8001154:	2b0b      	cmp	r3, #11
 8001156:	d903      	bls.n	8001160 <_malloc_r+0x68>
 8001158:	6023      	str	r3, [r4, #0]
 800115a:	441c      	add	r4, r3
 800115c:	6025      	str	r5, [r4, #0]
 800115e:	e004      	b.n	800116a <_malloc_r+0x72>
 8001160:	6863      	ldr	r3, [r4, #4]
 8001162:	42a2      	cmp	r2, r4
 8001164:	bf0c      	ite	eq
 8001166:	600b      	streq	r3, [r1, #0]
 8001168:	6053      	strne	r3, [r2, #4]
 800116a:	4630      	mov	r0, r6
 800116c:	f000 f8ce 	bl	800130c <__malloc_unlock>
 8001170:	f104 000b 	add.w	r0, r4, #11
 8001174:	1d23      	adds	r3, r4, #4
 8001176:	f020 0007 	bic.w	r0, r0, #7
 800117a:	1ac2      	subs	r2, r0, r3
 800117c:	d0cc      	beq.n	8001118 <_malloc_r+0x20>
 800117e:	1a1b      	subs	r3, r3, r0
 8001180:	50a3      	str	r3, [r4, r2]
 8001182:	e7c9      	b.n	8001118 <_malloc_r+0x20>
 8001184:	4622      	mov	r2, r4
 8001186:	6864      	ldr	r4, [r4, #4]
 8001188:	e7cc      	b.n	8001124 <_malloc_r+0x2c>
 800118a:	1cc4      	adds	r4, r0, #3
 800118c:	f024 0403 	bic.w	r4, r4, #3
 8001190:	42a0      	cmp	r0, r4
 8001192:	d0e3      	beq.n	800115c <_malloc_r+0x64>
 8001194:	1a21      	subs	r1, r4, r0
 8001196:	4630      	mov	r0, r6
 8001198:	f000 f808 	bl	80011ac <_sbrk_r>
 800119c:	3001      	adds	r0, #1
 800119e:	d1dd      	bne.n	800115c <_malloc_r+0x64>
 80011a0:	e7cf      	b.n	8001142 <_malloc_r+0x4a>
 80011a2:	bf00      	nop
 80011a4:	2000008c 	.word	0x2000008c
 80011a8:	20000090 	.word	0x20000090

080011ac <_sbrk_r>:
 80011ac:	b538      	push	{r3, r4, r5, lr}
 80011ae:	4d06      	ldr	r5, [pc, #24]	; (80011c8 <_sbrk_r+0x1c>)
 80011b0:	2300      	movs	r3, #0
 80011b2:	4604      	mov	r4, r0
 80011b4:	4608      	mov	r0, r1
 80011b6:	602b      	str	r3, [r5, #0]
 80011b8:	f7ff fb72 	bl	80008a0 <_sbrk>
 80011bc:	1c43      	adds	r3, r0, #1
 80011be:	d102      	bne.n	80011c6 <_sbrk_r+0x1a>
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	b103      	cbz	r3, 80011c6 <_sbrk_r+0x1a>
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	200000f0 	.word	0x200000f0

080011cc <__sread>:
 80011cc:	b510      	push	{r4, lr}
 80011ce:	460c      	mov	r4, r1
 80011d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d4:	f000 f8a0 	bl	8001318 <_read_r>
 80011d8:	2800      	cmp	r0, #0
 80011da:	bfab      	itete	ge
 80011dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011de:	89a3      	ldrhlt	r3, [r4, #12]
 80011e0:	181b      	addge	r3, r3, r0
 80011e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011e6:	bfac      	ite	ge
 80011e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80011ea:	81a3      	strhlt	r3, [r4, #12]
 80011ec:	bd10      	pop	{r4, pc}

080011ee <__swrite>:
 80011ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f2:	461f      	mov	r7, r3
 80011f4:	898b      	ldrh	r3, [r1, #12]
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	4605      	mov	r5, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	4616      	mov	r6, r2
 80011fe:	d505      	bpl.n	800120c <__swrite+0x1e>
 8001200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001204:	2302      	movs	r3, #2
 8001206:	2200      	movs	r2, #0
 8001208:	f000 f868 	bl	80012dc <_lseek_r>
 800120c:	89a3      	ldrh	r3, [r4, #12]
 800120e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001212:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001216:	81a3      	strh	r3, [r4, #12]
 8001218:	4632      	mov	r2, r6
 800121a:	463b      	mov	r3, r7
 800121c:	4628      	mov	r0, r5
 800121e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001222:	f000 b817 	b.w	8001254 <_write_r>

08001226 <__sseek>:
 8001226:	b510      	push	{r4, lr}
 8001228:	460c      	mov	r4, r1
 800122a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800122e:	f000 f855 	bl	80012dc <_lseek_r>
 8001232:	1c43      	adds	r3, r0, #1
 8001234:	89a3      	ldrh	r3, [r4, #12]
 8001236:	bf15      	itete	ne
 8001238:	6560      	strne	r0, [r4, #84]	; 0x54
 800123a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800123e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001242:	81a3      	strheq	r3, [r4, #12]
 8001244:	bf18      	it	ne
 8001246:	81a3      	strhne	r3, [r4, #12]
 8001248:	bd10      	pop	{r4, pc}

0800124a <__sclose>:
 800124a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800124e:	f000 b813 	b.w	8001278 <_close_r>
	...

08001254 <_write_r>:
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d07      	ldr	r5, [pc, #28]	; (8001274 <_write_r+0x20>)
 8001258:	4604      	mov	r4, r0
 800125a:	4608      	mov	r0, r1
 800125c:	4611      	mov	r1, r2
 800125e:	2200      	movs	r2, #0
 8001260:	602a      	str	r2, [r5, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	f7ff facb 	bl	80007fe <_write>
 8001268:	1c43      	adds	r3, r0, #1
 800126a:	d102      	bne.n	8001272 <_write_r+0x1e>
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	b103      	cbz	r3, 8001272 <_write_r+0x1e>
 8001270:	6023      	str	r3, [r4, #0]
 8001272:	bd38      	pop	{r3, r4, r5, pc}
 8001274:	200000f0 	.word	0x200000f0

08001278 <_close_r>:
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	4d06      	ldr	r5, [pc, #24]	; (8001294 <_close_r+0x1c>)
 800127c:	2300      	movs	r3, #0
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	f7ff fad7 	bl	8000836 <_close>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d102      	bne.n	8001292 <_close_r+0x1a>
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	b103      	cbz	r3, 8001292 <_close_r+0x1a>
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	200000f0 	.word	0x200000f0

08001298 <_fstat_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4d07      	ldr	r5, [pc, #28]	; (80012b8 <_fstat_r+0x20>)
 800129c:	2300      	movs	r3, #0
 800129e:	4604      	mov	r4, r0
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	602b      	str	r3, [r5, #0]
 80012a6:	f7ff fad2 	bl	800084e <_fstat>
 80012aa:	1c43      	adds	r3, r0, #1
 80012ac:	d102      	bne.n	80012b4 <_fstat_r+0x1c>
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	b103      	cbz	r3, 80012b4 <_fstat_r+0x1c>
 80012b2:	6023      	str	r3, [r4, #0]
 80012b4:	bd38      	pop	{r3, r4, r5, pc}
 80012b6:	bf00      	nop
 80012b8:	200000f0 	.word	0x200000f0

080012bc <_isatty_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	4d06      	ldr	r5, [pc, #24]	; (80012d8 <_isatty_r+0x1c>)
 80012c0:	2300      	movs	r3, #0
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	602b      	str	r3, [r5, #0]
 80012c8:	f7ff fad1 	bl	800086e <_isatty>
 80012cc:	1c43      	adds	r3, r0, #1
 80012ce:	d102      	bne.n	80012d6 <_isatty_r+0x1a>
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	b103      	cbz	r3, 80012d6 <_isatty_r+0x1a>
 80012d4:	6023      	str	r3, [r4, #0]
 80012d6:	bd38      	pop	{r3, r4, r5, pc}
 80012d8:	200000f0 	.word	0x200000f0

080012dc <_lseek_r>:
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	4d07      	ldr	r5, [pc, #28]	; (80012fc <_lseek_r+0x20>)
 80012e0:	4604      	mov	r4, r0
 80012e2:	4608      	mov	r0, r1
 80012e4:	4611      	mov	r1, r2
 80012e6:	2200      	movs	r2, #0
 80012e8:	602a      	str	r2, [r5, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	f7ff faca 	bl	8000884 <_lseek>
 80012f0:	1c43      	adds	r3, r0, #1
 80012f2:	d102      	bne.n	80012fa <_lseek_r+0x1e>
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	b103      	cbz	r3, 80012fa <_lseek_r+0x1e>
 80012f8:	6023      	str	r3, [r4, #0]
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	200000f0 	.word	0x200000f0

08001300 <__malloc_lock>:
 8001300:	4801      	ldr	r0, [pc, #4]	; (8001308 <__malloc_lock+0x8>)
 8001302:	f7ff be43 	b.w	8000f8c <__retarget_lock_acquire_recursive>
 8001306:	bf00      	nop
 8001308:	200000e8 	.word	0x200000e8

0800130c <__malloc_unlock>:
 800130c:	4801      	ldr	r0, [pc, #4]	; (8001314 <__malloc_unlock+0x8>)
 800130e:	f7ff be3e 	b.w	8000f8e <__retarget_lock_release_recursive>
 8001312:	bf00      	nop
 8001314:	200000e8 	.word	0x200000e8

08001318 <_read_r>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4d07      	ldr	r5, [pc, #28]	; (8001338 <_read_r+0x20>)
 800131c:	4604      	mov	r4, r0
 800131e:	4608      	mov	r0, r1
 8001320:	4611      	mov	r1, r2
 8001322:	2200      	movs	r2, #0
 8001324:	602a      	str	r2, [r5, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	f7ff fa4c 	bl	80007c4 <_read>
 800132c:	1c43      	adds	r3, r0, #1
 800132e:	d102      	bne.n	8001336 <_read_r+0x1e>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	b103      	cbz	r3, 8001336 <_read_r+0x1e>
 8001334:	6023      	str	r3, [r4, #0]
 8001336:	bd38      	pop	{r3, r4, r5, pc}
 8001338:	200000f0 	.word	0x200000f0

0800133c <_init>:
 800133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133e:	bf00      	nop
 8001340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001342:	bc08      	pop	{r3}
 8001344:	469e      	mov	lr, r3
 8001346:	4770      	bx	lr

08001348 <_fini>:
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134a:	bf00      	nop
 800134c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134e:	bc08      	pop	{r3}
 8001350:	469e      	mov	lr, r3
 8001352:	4770      	bx	lr
